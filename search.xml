<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>起始页</tag>
      </tags>
  </entry>
  <entry>
    <title>博客设置页面</title>
    <url>/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>这是一个起始页面的介绍，主要包含博客主题页面的设置、博客的功能展示以及对博客历次修改的日志记录。</p>
<h2 id="错误修改"><a href="#错误修改" class="headerlink" title="错误修改"></a>错误修改</h2><h3 id="针对algolia聊天框功能的修改"><a href="#针对algolia聊天框功能的修改" class="headerlink" title="针对algolia聊天框功能的修改"></a>针对algolia聊天框功能的修改</h3><p>当不需要algolia功能时，hexo在构建页面时出现相关报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError: E:\Blog\Hexo\themes\Fan\layout\includes\config.pug:1</span><br><span class="line">  &gt; 1| -</span><br><span class="line">    2|   var algolia = <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">    3|   var <span class="built_in">env</span> = process.env;</span><br><span class="line">    4|   <span class="keyword">if</span> (theme.algolia_search.enable) &#123;</span><br><span class="line"></span><br><span class="line">Cannot <span class="built_in">read</span> properties of undefined (reading <span class="string">&#x27;valine&#x27;</span>)</span><br><span class="line">    at <span class="built_in">eval</span> (<span class="built_in">eval</span> at wrap (E:\Blog\Hexo\node_modules\hexo-renderer-pug\node_module</span><br><span class="line">s\pug-runtime\wrap.js:6:10), &lt;anonymous&gt;:198:38)</span><br><span class="line">    at template (<span class="built_in">eval</span> at wrap (E:\Blog\Hexo\node_modules\hexo-renderer-pug\node_mo</span><br><span class="line">dules\pug-runtime\wrap.js:6:10), &lt;anonymous&gt;:1371:7)</span><br><span class="line">    at _View._compiled (E:\Blog\Hexo\node_modules\hexo\lib\theme\view.js:136:50)</span><br><span class="line">    at _View.render (E:\Blog\Hexo\node_modules\hexo\lib\theme\view.js:39:17)</span><br><span class="line">    at E:\Blog\Hexo\node_modules\hexo\lib\hexo\index.js:64:21</span><br><span class="line">    at tryCatcher (E:\Blog\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at E:\Blog\Hexo\node_modules\bluebird\js\release\method.js:15:34</span><br><span class="line">    at RouteStream._read (E:\Blog\Hexo\node_modules\hexo\lib\hexo\router.js:47:5)</span><br><span class="line">    at Readable.<span class="built_in">read</span> (node:internal/streams/readable:496:12)</span><br><span class="line">    at resume_ (node:internal/streams/readable:999:12)</span><br><span class="line">    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)</span><br></pre></td></tr></table></figure>
<p>推测原因和config.pug文件中的此段代码有关，故进行注释。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//- var algolia = <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">//- var <span class="built_in">env</span> = process.env;</span><br><span class="line">//- <span class="keyword">if</span> (theme.algolia_search.enable) &#123;</span><br><span class="line">//-   algolia = JSON.stringify(&#123;</span><br><span class="line">//-     appId: env.ALGOLIA_APP_ID || config.algolia.appId || config.algolia.applicationID,</span><br><span class="line">//-     apiKey: env.ALGOLIA_API_KEY || config.algolia.apiKey,</span><br><span class="line">//-     indexName: env.ALGOLIA_INDEX_NAME || config.algolia.indexName,</span><br><span class="line">//-     hits: theme.algolia_search.hits,</span><br><span class="line">//-     // search languages</span><br><span class="line">//-     languages: &#123;</span><br><span class="line">//-       input_placeholder: _p(<span class="string">&quot;algolia_search.input_placeholder&quot;</span>),</span><br><span class="line">//-       hits_empty: _p(<span class="string">&quot;algolia_search.hits_empty&quot;</span>),</span><br><span class="line">//-       hits_stats: _p(<span class="string">&quot;algolia_search.hits_stats&quot;</span>)</span><br><span class="line">//-     &#125;</span><br><span class="line">//-   &#125;)</span><br><span class="line">//- &#125;</span><br></pre></td></tr></table></figure>
<p>页面正常显示了：</p>
<img src="/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/image.png" class="" title="显示页面">

<p>在根据<a href="https://lanta.bangumi.cyou/2022/03/12/hexo-install-algolia/">https://lanta.bangumi.cyou/2022/03/12/hexo-install-algolia/</a>的方法注册algolia账户，并配置好搜索后，即可进行搜索</p>
<img src="/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/image_1.png" class="" title="显示搜索页面">
<p>每次写完新文章后，记得再次更新algolia的索引库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure>
<h3 id="针对开始和刷新时的页面标题设置："><a href="#针对开始和刷新时的页面标题设置：" class="headerlink" title="针对开始和刷新时的页面标题设置："></a>针对开始和刷新时的页面标题设置：</h3><p>在&#x2F;theme&#x2F;主题&#x2F;source&#x2F;js&#x2F;utils.js中可以修改，共有两个设置（可添加）：<br>一个是实时时间的获取：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 获取实时时间，写入 <span class="built_in">id</span> 为 now-time 的标签中</span><br><span class="line"> */</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    const divTime = document.getElementById(<span class="string">&#x27;now-time&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">getTime</span></span>() &#123;</span><br><span class="line">        <span class="built_in">let</span> time = new Date();</span><br><span class="line">        <span class="built_in">let</span> hour = time.getHours() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getHours() : time.getHours();</span><br><span class="line">        <span class="built_in">let</span> minute = time.getMinutes() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getMinutes() : time.getMinutes();</span><br><span class="line">        <span class="built_in">let</span> second = time.getSeconds() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getSeconds() : time.getSeconds();</span><br><span class="line">        divTime.innerText = hour + <span class="string">&#x27;:&#x27;</span> + minute + <span class="string">&#x27;:&#x27;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getTime();</span><br><span class="line">    setInterval(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        getTime();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>一个是页面title的更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 判断当前页面是否为活动页</span><br><span class="line"> */</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    // 网页当前状态判断</span><br><span class="line">    <span class="built_in">let</span> state, visibilityChange, status, doc = document;</span><br><span class="line">    <span class="keyword">if</span> (typeof document.hidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;visibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;visibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.mozHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;mozvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;mozVisibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.msHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;msvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;msVisibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.webkitHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;webkitvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;webkitVisibilityState&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> docText = doc.title;</span><br><span class="line">    // 添加监听器，在title里显示状态变化</span><br><span class="line">    doc.addEventListener(visibilityChange, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="keyword">if</span> (doc[state] === <span class="string">&#x27;visible&#x27;</span>) &#123;</span><br><span class="line">            doc.title = <span class="string">&#x27;欢迎回来！d(`･∀･)b 👏&#x27;</span>;</span><br><span class="line">            status = setTimeout(() =&gt; &#123;</span><br><span class="line">                doc.title = docText;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            doc.title = &#x27;藏起来了d(`x_x)b&#x27;;</span><br><span class="line">            if (status) &#123;</span><br><span class="line">                clearTimeout(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">    // 初始化页面状态</span><br><span class="line">    // doc.title = &#x27;Nothing2say的博客&#x27;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Git仓库与Hexo仓库同步</title>
    <url>/2023/08/03/Git%E4%BB%93%E5%BA%93%E4%B8%8EHexo%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="Git分支的操作总结"><a href="#Git分支的操作总结" class="headerlink" title="Git分支的操作总结"></a>Git分支的操作总结</h1><ol>
<li>切换分支，比如<code>git checkout master</code>是切换到master分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout 任意分支      </span><br></pre></td></tr></table></figure></li>
<li>创建并切换到新分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b 新建分支      </span><br></pre></td></tr></table></figure></li>
<li>更新分支代码<code>并</code>提交<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add *       </span><br><span class="line">$ git commit -m <span class="string">&quot;新建分支&quot;</span>      </span><br><span class="line">$ git push origin 新建分支       </span><br></pre></td></tr></table></figure></li>
<li>查看所有分支 和 查看当前分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a </span><br><span class="line">$ git branch     </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用git分支保存hexo博客源码到github"><a href="#使用git分支保存hexo博客源码到github" class="headerlink" title="使用git分支保存hexo博客源码到github"></a>使用git分支保存hexo博客源码到github</h1><p>主要是新建一个新的分支，然后将本地Hexo目录保存在新分支中，然后与远程仓库关联。</p>
<p>后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有.gitignore将其忽略了。</p>
<p>然后默认分支改为保存博客源码的source分支，但是depoly的发布分支设为master。</p>
<p>以后每次修改了主题或者新增了博文，按照以下步骤同步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;new modifed&quot;</span></span><br><span class="line">$ git push origin Hexo</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<h1 id="利用-gitignore来忽略关键文件和文件夹："><a href="#利用-gitignore来忽略关键文件和文件夹：" class="headerlink" title="利用.gitignore来忽略关键文件和文件夹："></a>利用.gitignore来忽略关键文件和文件夹：</h1><h2 id="Git-忽略规则优先级"><a href="#Git-忽略规则优先级" class="headerlink" title="Git 忽略规则优先级"></a>Git 忽略规则优先级</h2><p>在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">从命令行中读取可用的忽略规则</span><br><span class="line">当前目录定义的规则</span><br><span class="line">父级目录定义的规则，依次递推</span><br><span class="line"><span class="variable">$GIT_DIR</span>/info/exclude 文件中定义的规则</span><br><span class="line">core.excludesfile中定义的全局规则</span><br></pre></td></tr></table></figure>
<h2 id="Git-忽略规则匹配语法"><a href="#Git-忽略规则匹配语法" class="headerlink" title="Git 忽略规则匹配语法"></a>Git 忽略规则匹配语法</h2><p>在 .gitignore 文件中，每一行的忽略规则的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">空格不匹配任意文件，可作为分隔符，可用反斜杠转义</span><br><span class="line">开头的文件标识注释，可以使用反斜杠进行转义</span><br><span class="line">! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义</span><br><span class="line">/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</span><br><span class="line">/ 开始的模式匹配项目跟目录</span><br><span class="line">如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</span><br><span class="line">** 匹配多级目录，可在开始，中间，结束</span><br><span class="line">? 通用匹配单个字符</span><br><span class="line">* 通用匹配零个或多个字符</span><br><span class="line">[] 通用匹配单个字符列表</span><br></pre></td></tr></table></figure>
<h2 id="常用匹配示例"><a href="#常用匹配示例" class="headerlink" title="常用匹配示例"></a>常用匹配示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line">/bin: 忽略根目录下的bin文件</span><br><span class="line">/*.c: 忽略 cat.c，不忽略 build/cat.c</span><br><span class="line">debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</span><br><span class="line">**/foo: 忽略/foo, a/foo, a/b/foo等</span><br><span class="line">a/**/b: 忽略a/b, a/x/b, a/x/y/b等</span><br><span class="line">!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件</span><br><span class="line">*.<span class="built_in">log</span>: 忽略所有 .<span class="built_in">log</span> 文件</span><br><span class="line">config.php: 忽略当前路径的 config.php 文件</span><br></pre></td></tr></table></figure>
<h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>
<p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>
<p>而正常需要忽略一个文件，则是在.gitignore中添加文件后，再提交。然后继续在本地添加此文件，在提交到git时发现提交不了，证明已经成功被忽略了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add key.txt</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">key.txt</span><br><span class="line">hint: Use -f <span class="keyword">if</span> you really want to add them.</span><br><span class="line">hint: Turn this message off by running</span><br><span class="line">hint: <span class="string">&quot;git config advice.addIgnoredFile false&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以用git check-ignore命令检查.gitignore文件中是否有规则写错了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v key.txt</span><br><span class="line">.gitignore:9:key.txt    key.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
