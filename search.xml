<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git仓库与Hexo仓库同步</title>
    <url>/2023/08/03/Git%E4%BB%93%E5%BA%93%E4%B8%8EHexo%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="Git分支的操作总结"><a href="#Git分支的操作总结" class="headerlink" title="Git分支的操作总结"></a>Git分支的操作总结</h1><ol>
<li>切换分支，比如<code>git checkout master</code>是切换到master分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout 任意分支      </span><br></pre></td></tr></table></figure></li>
<li>创建并切换到新分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b 新建分支      </span><br></pre></td></tr></table></figure>
3.切换分支，同时保证本地文件和远程分支的一致性<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout 任意分支 --</span><br></pre></td></tr></table></figure></li>
<li>更新分支代码<code>并</code>提交<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add *       </span><br><span class="line">$ git commit -m <span class="string">&quot;新建分支&quot;</span>      </span><br><span class="line">$ git push origin 新建分支       </span><br></pre></td></tr></table></figure></li>
<li>查看所有分支 和 查看当前分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a </span><br><span class="line">$ git branch     </span><br></pre></td></tr></table></figure>
6.当出现<code>git branch -a</code>没反应时，可能没有连接到远程仓库：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">删除本地的.git文件</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin &lt;your remote repository SSH <span class="built_in">link</span>&gt;</span><br><span class="line">$ git fetch</span><br></pre></td></tr></table></figure>
如下图所示：<img src="/2023/08/03/Git%E4%BB%93%E5%BA%93%E4%B8%8EHexo%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/image_solution_1.png" class="" title="显示页面"></li>
</ol>
<h1 id="使用git分支保存hexo博客源码到github"><a href="#使用git分支保存hexo博客源码到github" class="headerlink" title="使用git分支保存hexo博客源码到github"></a>使用git分支保存hexo博客源码到github</h1><p>主要是新建一个新的分支，然后将本地Hexo目录保存在新分支中，然后与远程仓库关联。</p>
<p>后续即便你再发布博客时，deploy生成public文件，在提交博客源码时，也不会将其带上去，因为有.gitignore将其忽略了。</p>
<p>然后默认分支改为保存博客源码的source分支，但是depoly的发布分支设为master。</p>
<p>以后每次修改了主题或者新增了博文，按照以下步骤同步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;new modifed&quot;</span></span><br><span class="line">$ git push origin Hexo</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<h1 id="Github文件夹出现箭头，且打不开文件"><a href="#Github文件夹出现箭头，且打不开文件" class="headerlink" title="Github文件夹出现箭头，且打不开文件"></a>Github文件夹出现箭头，且打不开文件</h1><p>原因：GitHub将他视为一个子系统模块，因此在上传代码时隔绝了这个文件夹，上传失败。</p>
<img src="/2023/08/03/Git%E4%BB%93%E5%BA%93%E4%B8%8EHexo%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/image_right_arrow.png" class="" title="显示页面">

<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 删除子文件夹里面的.git文件</span><br><span class="line">2. 执行git <span class="built_in">rm</span> --cached [文件夹名]</span><br><span class="line">3. 执行git add .  (或是把 . 换成自己要传的文件夹）</span><br><span class="line">4. 执行git commit -m <span class="string">&quot;commit messge&quot;</span></span><br><span class="line">5. 执行git push origin [branch_name]</span><br></pre></td></tr></table></figure>
<h1 id="利用-gitignore来忽略关键文件和文件夹："><a href="#利用-gitignore来忽略关键文件和文件夹：" class="headerlink" title="利用.gitignore来忽略关键文件和文件夹："></a>利用.gitignore来忽略关键文件和文件夹：</h1><h2 id="Git-忽略规则优先级"><a href="#Git-忽略规则优先级" class="headerlink" title="Git 忽略规则优先级"></a>Git 忽略规则优先级</h2><p>在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">从命令行中读取可用的忽略规则</span><br><span class="line">当前目录定义的规则</span><br><span class="line">父级目录定义的规则，依次递推</span><br><span class="line"><span class="variable">$GIT_DIR</span>/info/exclude 文件中定义的规则</span><br><span class="line">core.excludesfile中定义的全局规则</span><br></pre></td></tr></table></figure>
<h2 id="Git-忽略规则匹配语法"><a href="#Git-忽略规则匹配语法" class="headerlink" title="Git 忽略规则匹配语法"></a>Git 忽略规则匹配语法</h2><p>在 .gitignore 文件中，每一行的忽略规则的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">空格不匹配任意文件，可作为分隔符，可用反斜杠转义</span><br><span class="line">开头的文件标识注释，可以使用反斜杠进行转义</span><br><span class="line">! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义</span><br><span class="line">/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</span><br><span class="line">/ 开始的模式匹配项目跟目录</span><br><span class="line">如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</span><br><span class="line">** 匹配多级目录，可在开始，中间，结束</span><br><span class="line">? 通用匹配单个字符</span><br><span class="line">* 通用匹配零个或多个字符</span><br><span class="line">[] 通用匹配单个字符列表</span><br></pre></td></tr></table></figure>
<h2 id="常用匹配示例"><a href="#常用匹配示例" class="headerlink" title="常用匹配示例"></a>常用匹配示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line">/bin: 忽略根目录下的bin文件</span><br><span class="line">/*.c: 忽略 cat.c，不忽略 build/cat.c</span><br><span class="line">debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</span><br><span class="line">**/foo: 忽略/foo, a/foo, a/b/foo等</span><br><span class="line">a/**/b: 忽略a/b, a/x/b, a/x/y/b等</span><br><span class="line">!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件</span><br><span class="line">*.<span class="built_in">log</span>: 忽略所有 .<span class="built_in">log</span> 文件</span><br><span class="line">config.php: 忽略当前路径的 config.php 文件</span><br></pre></td></tr></table></figure>
<h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>
<p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>
<p>而正常需要忽略一个文件，则是在.gitignore中添加文件后，再提交。然后继续在本地添加此文件，在提交到git时发现提交不了，证明已经成功被忽略了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add key.txt</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">key.txt</span><br><span class="line">hint: Use -f <span class="keyword">if</span> you really want to add them.</span><br><span class="line">hint: Turn this message off by running</span><br><span class="line">hint: <span class="string">&quot;git config advice.addIgnoredFile false&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以用git check-ignore命令检查.gitignore文件中是否有规则写错了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v key.txt</span><br><span class="line">.gitignore:9:key.txt    key.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop 安装</title>
    <url>/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Scoop-安装流程（更新中）"><a href="#Scoop-安装流程（更新中）" class="headerlink" title="Scoop 安装流程（更新中）"></a>Scoop 安装流程（更新中）</h1><h2 id="1-设置一个安装目录："><a href="#1-设置一个安装目录：" class="headerlink" title="1. 设置一个安装目录："></a>1. 设置一个安装目录：</h2><img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image.png" class="" title="显示img页面">

<h2 id="2-安装前准备"><a href="#2-安装前准备" class="headerlink" title="2. 安装前准备"></a>2. 安装前准备</h2><p>Windows PowerShell的版本要求：**$psversiontable.psversion.major # should be &gt;&#x3D; 5.0**</p>
<p>查询版本号的方法：</p>
<blockquote>
<p><strong>先在PowerShell中输入</strong></p>
<blockquote>
<p>$psversiontable </p>
</blockquote>
<p><strong>再输入host或$host</strong></p>
<blockquote>
<p>host</p>
</blockquote>
<p><strong>如下图</strong>:</p>
</blockquote>
<blockquote>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-1.png" class="" title="显示img-1页面">
</blockquote>
</blockquote>
<h2 id="3-在PowerShell中设置Scoop安装权限"><a href="#3-在PowerShell中设置Scoop安装权限" class="headerlink" title="3. 在PowerShell中设置Scoop安装权限"></a>3. 在PowerShell中设置Scoop安装权限</h2><p>PowerShell 执行策略必须是以下策略之一：无限制、远程签名或绕过才能执行安装程序。例如：</p>
<blockquote>
<p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p>
</blockquote>
<h2 id="4-自定义安装"><a href="#4-自定义安装" class="headerlink" title="4. 自定义安装"></a>4. 自定义安装</h2><p>在所在的文件夹下，输入</p>
<blockquote>
<p>irm get.scoop.sh -outfile ‘install.ps1’</p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-2.png" class="" title="显示img-2页面">
</blockquote>
<p>当出现如下图的报错：</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-3.png" class="" title="显示img-3页面">
</blockquote>
<p>说明<font color=red><strong>接口方</strong></font>变更了<font color=red><strong>安全协议</strong></font>，而<font color=red><strong>客户端</strong></font>并未启用该协议。<br>解决方法：让客户端启用该协议。<br>把所有可用的协议都启用，随你服务端将来怎么换。代码如下：</p>
<blockquote>
<p> [Net.ServicePointManager]::SecurityProtocol &#x3D; [Net.SecurityProtocolType]::Ssl3 -bor [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12</p>
</blockquote>
<p>然后可以查看TLS协议是否都启用成功：</p>
<blockquote>
<p>[Net.ServicePointManager]:: SecurityProtocol</p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-4.png" class="" title="显示img-4页面">
</blockquote>
<p>这时，安装根目录下应该有<code>install.ps1</code>:</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-5.png" class="" title="显示img-5页面">
</blockquote>
<p>说明<code>scoop</code>的安装脚本已经从服务器下载到本地，之后可按照不同的参数，执行如下代码进行安装：</p>
<blockquote>
<p>.\install.ps1 -?</p>
</blockquote>
<p>例如：可以将 <code>scoop</code> 安装到自定义目录，配置 <code>scoop</code> 以将全局程序安装到自定义目录，并在安装过程中绕过系统代理。</p>
<blockquote>
<p>.\install.ps1 -ScoopDir ‘D:\Applications\Scoop’ -ScoopGlobalDir ‘F:\GlobalScoopApps’ -NoProxy</p>
</blockquote>
<p>请注意，在PowerShell的管理员权限下执行时，需要在<code>.\install.ps1</code>后加入<code>-RunAsAdmin</code>，因此代码为：</p>
<blockquote>
<p>.\install.ps1 -RunAsAdmin -ScoopDir ‘E:\Software\Scoop’ -ScoopGlobalDir ‘E:\Software\GlobalScoopApps’ -NoProxy</p>
</blockquote>
<p>或者可以在设置<font color=red><strong>用户环境</strong></font>和<font color=red><strong>全局环境</strong></font>后再进行安装，代码如下：</p>
<blockquote>
<p>$env:SCOOP&#x3D;’E:\Software\Scoop’</p>
<p>$env:SCOOP_GLOBAL&#x3D;’E:\Software\GlobalScoopApps’<br>[Environment]::SetEnvironmentVariable(‘SCOOP_GLOBAL’, $env:SCOOP_GLOBAL, ‘Machine’)<br>irm get.scoop.sh | iex</p>
<p>如下图：</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-6.png" class="" title="显示img-6页面">
</blockquote>
</blockquote>
<p>说明安装成功，可在自定义目录下找到Scoop文件夹：</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-7.png" class="" title="显示img-7页面">
</blockquote>
<p>此时输入<code>scoop update</code>，可能会出现以下错误：</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-8.png" class="" title="显示img-8页面">
</blockquote>
<p>说明还需要安装<code>git</code>，按照提示执行：</p>
<blockquote>
<p>scoop install git\</p>
</blockquote>
<p>会先提示安装<code>7zip</code>:</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-9.png" class="" title="显示img-9页面">
</blockquote>
<p>在从<code>main bucket</code>安装<code>git</code>时，中途连接断开，因而安装失败。<br>解决方法：</p>
<blockquote>
<p>先找到所在的bucket的Main分支：</p>
<blockquote>
<p>cd $env:SCOOP\buckets\Main</p>
</blockquote>
<p>然后在所在的Main分支目录下安装<code>git</code>:</p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-10.png" class="" title="显示img-10页面">

<p>这里的安装失败是因为网络连接失败，因而可以尝试使用机场来连接。</p>
</blockquote>
<p>重新连接后，安装<code>git</code>:</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-11.png" class="" title="显示img-11页面">
</blockquote>
<p>此时，<code>git</code>通过<code>scoop</code>安装成功。再次执行代码：</p>
<blockquote>
<p>scoop update</p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-12.png" class="" title="显示img-12页面">
</blockquote>
<p>证明<code>scoop</code>已安装成功，且更新的镜像源已换为国内源</p>
<h2 id="5-使用说明"><a href="#5-使用说明" class="headerlink" title="5.使用说明"></a>5.使用说明</h2><p>简单解释下子目录中其他文件夹的含义：</p>
<ul>
<li><code>apps</code>——所有通过<code>scoop</code>安装的软件都在里面。</li>
<li><code>buckets</code>——管理软件的仓库，用于记录哪些软件可以安装、更新等信息，默认添加main仓库，主要包含无需GUI的软件，可手动添加其他仓库或自建仓库，具体在推荐软件仓库中介绍。</li>
<li><code>cache</code>——软件下载后安装包暂存目录。</li>
<li><code>persit</code>——用于储存一些用户数据，不会随软件更新而替换。</li>
<li><code>shims</code>——用于软链接应用，使应用之间不会互相干扰，实际使用过程中无用户操作不必细究。<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-14.png" class="" title="显示img-14页面"></blockquote>
</li>
</ul>
<p>以下是一些常用的命令说明：</p>
<ul>
<li><code>search</code>——搜索仓库中是否有相应软件。</li>
<li><code>install</code>——安装软件。</li>
<li><code>uninstall</code>——卸载软件。</li>
<li><code>update</code>——更新软件。可通过scoop update *更新所有已安装软件，或通过scoop update更新所有软件仓库资料及Scoop自身而不更新软件。</li>
<li><code>hold</code>——锁定软件阻止其更新。</li>
<li><code>info</code>——查询软件简要信息。</li>
<li><code>home</code>——打开浏览器进入软件官网。</li>
</ul>
<p>如果忘记了，可通过输入<code>scoop help</code>来查询语法，以及更多不怎么常用的操作指导：</p>
<blockquote>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-15.png" class="" title="显示img-15页面">
</blockquote>
<p>例如，可以通过<code>scoop bucket known</code>来查询安装的所有bucket：</p>
<blockquote>
</blockquote>
<h2 id="6-错误整理"><a href="#6-错误整理" class="headerlink" title="6. 错误整理"></a>6. 错误整理</h2><p>当出现以下错误报告：</p>
<blockquote>
<p><font color=red><strong>XXX : 请求被中止: 未能创建 SSL&#x2F;TLS 安全通道。</strong></font><br>或者\</p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-13.png" class="" title="显示img-13页面">
</blockquote>
<p>说明启用的TLS协议不够，则再次通过执行如下代码：</p>
<blockquote>
<p> [Net.ServicePointManager]::SecurityProtocol &#x3D; [Net.SecurityProtocolType]::Ssl3 -bor [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12</p>
</blockquote>
<p>来启用所有TLS协议</p>
<h2 id="7-相关工具对比"><a href="#7-相关工具对比" class="headerlink" title="7.相关工具对比"></a>7.相关工具对比</h2><p>同类竞品对比：</p>
<ol>
<li>Microsoft Store软件商店，含GUI的常规软件商店。</li>
<li>Chocolatey，另一个第三方命令行软件管理工具。</li>
<li>Winget，微软官方近两年的开源命令行软件管理工具。</li>
</ol>
<table>
<thead>
<tr>
<th><strong>评价指标</strong></th>
<th align="center"><strong>Microsoft Store</strong></th>
<th align="center"><strong>Chocolatey</strong></th>
<th align="center"><strong>Winget</strong></th>
<th align="center"><strong>Scoop</strong></th>
</tr>
</thead>
<tbody><tr>
<td>GUI</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2716;</td>
</tr>
<tr>
<td>开源</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
</tr>
<tr>
<td>软件搜索、安装、更新</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
</tr>
<tr>
<td>已安装软件查看与卸载</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
</tr>
<tr>
<td>回滚版本与锁定版本</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
</tr>
<tr>
<td>导出与备份</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
<td align="center">&#x2714;</td>
</tr>
<tr>
<td>数据管理与清理</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2716;</td>
<td align="center">&#x2714;</td>
</tr>
</tbody></table>
<p><a href="https://zhuanlan.zhihu.com/p/463284082">此对比属于主观评价</a></p>
<ul>
<li><code>GUI</code>——Windows 11的Microsoft Store颜值非常高，Chocolatey有一个不怎么好看的GUI，Scoop有第三方GUI。不过实际使用下来发现命令行一行代码的体验也不差，反而清晰明了更加高效，GUI在用户体验方面也不一定是优势。</li>
<li><code>开源</code>——我可太爱开源软件了，虽然开源软件一般不如商业软件稳定，但是我可以自己提需求甚至自己去改很是舒服。</li>
<li><code>软件搜索、安装、更新</code>——需求中基础的基础，不能实现的话也别用了。为了更好地使用最新版的软件，体验稳定的新功能，我可是积极的更新派，但是让我去使用不稳定的beta版本当测试就不是那么愿意了。</li>
<li><code>回滚版本与锁定版本</code>——并不是那么要紧的需求，但对于某些开发人员来说为了稳定就是非常重要的需求了。</li>
<li><code>导出与备份</code>——并不是那么要紧的需求，但对于某些人员来说快速安装系统是非常重要的需求。</li>
<li><code>数据管理与清理</code>——主要就是软件管理逻辑方面的需求了（强迫症需求），除了Scoop其他工具的数据管理一言难尽吧，虽然Scoop许多第三方仓库中的软件也没实现好。</li>
</ul>
<!-- <table>
    <tr>
        <th>评价指标 </th>
        <th>Microsoft Store </th>
        <th>pingjiazhibiao </th>
    </tr>
    <tr>
        <th>pingjiazhibiao </th>
        <th>pingjiazhibiao </th>
        <th>pingjiazhibiao </th>
    </tr>
    <tr>
        <th>pingjiazhibiao </th>
        <th>pingjiazhibiao </th>
        <th>pingjiazhibiao </th>
    </tr>
</table> -->

<h2 id="8-社区提供的-bucket"><a href="#8-社区提供的-bucket" class="headerlink" title="8. 社区提供的 bucket"></a>8. 社区提供的 bucket</h2><p><strong><code>extras</code></strong> 这个 bucket 是最有用，也是我们大部分人肯定会用到的仓库。除此之外，我们可以通过这个命令查看 Scoop 还能直接识别哪些 bucket：</p>
<blockquote>
<p>scoop bucket known</p>
</blockquote>
<p>可以通过下面这个命令直接添加相应的 bucket：</p>
<blockquote>
<p>scoop bucket add &lt;仓库名&gt;</p>
</blockquote>
<p>一些相关的仓库介绍：</p>
<ul>
<li>extras：就是我刚刚介绍的，Scoop 官方维护的一个仓库，涵盖了大部分因为种种原因不能被收录进主仓库的常用软件。地址： <a href="https://github.com/ScoopInstaller/Extras/tree/master">lukesampson&#x2F;scoop-extras</a></li>
<li>nirsoft：是一个 NirSoft 开发的小工具的安装合集。NirSoft 制作了大量的（dozens and dozens）小工具，包括系统工具、网络工具、密码恢复等等，孜孜不倦、持续更新。<ul>
<li>Bucket 地址：<a href="https://github.com/kodybrown/scoop-nirsoft">kodybrown&#x2F;scoop-nirsoft</a></li>
<li>NirSoft 官网地址：<a href="http://www.nirsoft.net/">NirSoft</a></li>
</ul>
</li>
<li>games：顾名思义，是游戏（和与游戏相关的工具）合集。包含了大量免费&#x2F;开源的小游戏，地址：<a href="https://github.com/Calinou/scoop-games">Calinou&#x2F;scoop-games</a></li>
</ul>
<p>几个 bucket 都是 Scoop 官方维护认证的 bucket，当然我们也有很多由社区（用户）维护的 bucket。这里是一个按照 Github score（由 Star 数量、Fork 数量和 App 数量综合决定的 Github score）排列的 bucket 列表：<a href="https://rasa.github.io/scoop-directory/search">Scoop buckets by Github score</a></p>
<img src="/2023/08/03/Scoop-%E5%AE%89%E8%A3%85/image-16.png" class="" title="显示img-16页面">

<p>搜索bucket的网站：<a href="https://scoop.sh/#/">https://scoop.sh/#/</a></p>
<h2 id="9-相关链接和参考"><a href="#9-相关链接和参考" class="headerlink" title="9. 相关链接和参考"></a>9. 相关链接和参考</h2><p><a href="https://zhuanlan.zhihu.com/p/594363658">Scoop 安装、配置国内镜像、备份与迁移 - FJianC的文章 - 知乎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/463284082">Scoop——也许是Windows平台最好用的软件（包）管理器 - 爱丽丝的人偶一号的文章 - 知乎</a></p>
<p><a href="https://gitee.com/glsnames/scoop-installer">scoopInstaller: scoop国内镜像优化库，能够加速scoop安装及bucket源文件，无需用户设置代理 (gitee.com)</a></p>
<p><a href="https://sspai.com/post/52710">给 Scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a></p>
<p>官网：<a href="https://github.com/ScoopInstaller/Install.git">https://github.com/ScoopInstaller/Install.git</a></p>
]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Scoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>起始页</tag>
      </tags>
  </entry>
  <entry>
    <title>博客设置页面</title>
    <url>/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>这是一个起始页面的介绍，主要包含博客主题页面的设置、博客的功能展示以及对博客历次修改的日志记录。</p>
<h2 id="错误修改"><a href="#错误修改" class="headerlink" title="错误修改"></a>错误修改</h2><h3 id="针对algolia聊天框功能的修改"><a href="#针对algolia聊天框功能的修改" class="headerlink" title="针对algolia聊天框功能的修改"></a>针对algolia聊天框功能的修改</h3><p>当不需要algolia功能时，hexo在构建页面时出现相关报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError: E:\Blog\Hexo\themes\Fan\layout\includes\config.pug:1</span><br><span class="line">  &gt; 1| -</span><br><span class="line">    2|   var algolia = <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">    3|   var <span class="built_in">env</span> = process.env;</span><br><span class="line">    4|   <span class="keyword">if</span> (theme.algolia_search.enable) &#123;</span><br><span class="line"></span><br><span class="line">Cannot <span class="built_in">read</span> properties of undefined (reading <span class="string">&#x27;valine&#x27;</span>)</span><br><span class="line">    at <span class="built_in">eval</span> (<span class="built_in">eval</span> at wrap (E:\Blog\Hexo\node_modules\hexo-renderer-pug\node_module</span><br><span class="line">s\pug-runtime\wrap.js:6:10), &lt;anonymous&gt;:198:38)</span><br><span class="line">    at template (<span class="built_in">eval</span> at wrap (E:\Blog\Hexo\node_modules\hexo-renderer-pug\node_mo</span><br><span class="line">dules\pug-runtime\wrap.js:6:10), &lt;anonymous&gt;:1371:7)</span><br><span class="line">    at _View._compiled (E:\Blog\Hexo\node_modules\hexo\lib\theme\view.js:136:50)</span><br><span class="line">    at _View.render (E:\Blog\Hexo\node_modules\hexo\lib\theme\view.js:39:17)</span><br><span class="line">    at E:\Blog\Hexo\node_modules\hexo\lib\hexo\index.js:64:21</span><br><span class="line">    at tryCatcher (E:\Blog\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at E:\Blog\Hexo\node_modules\bluebird\js\release\method.js:15:34</span><br><span class="line">    at RouteStream._read (E:\Blog\Hexo\node_modules\hexo\lib\hexo\router.js:47:5)</span><br><span class="line">    at Readable.<span class="built_in">read</span> (node:internal/streams/readable:496:12)</span><br><span class="line">    at resume_ (node:internal/streams/readable:999:12)</span><br><span class="line">    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)</span><br></pre></td></tr></table></figure>
<p>推测原因和config.pug文件中的此段代码有关，故进行注释。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//- var algolia = <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">//- var <span class="built_in">env</span> = process.env;</span><br><span class="line">//- <span class="keyword">if</span> (theme.algolia_search.enable) &#123;</span><br><span class="line">//-   algolia = JSON.stringify(&#123;</span><br><span class="line">//-     appId: env.ALGOLIA_APP_ID || config.algolia.appId || config.algolia.applicationID,</span><br><span class="line">//-     apiKey: env.ALGOLIA_API_KEY || config.algolia.apiKey,</span><br><span class="line">//-     indexName: env.ALGOLIA_INDEX_NAME || config.algolia.indexName,</span><br><span class="line">//-     hits: theme.algolia_search.hits,</span><br><span class="line">//-     // search languages</span><br><span class="line">//-     languages: &#123;</span><br><span class="line">//-       input_placeholder: _p(<span class="string">&quot;algolia_search.input_placeholder&quot;</span>),</span><br><span class="line">//-       hits_empty: _p(<span class="string">&quot;algolia_search.hits_empty&quot;</span>),</span><br><span class="line">//-       hits_stats: _p(<span class="string">&quot;algolia_search.hits_stats&quot;</span>)</span><br><span class="line">//-     &#125;</span><br><span class="line">//-   &#125;)</span><br><span class="line">//- &#125;</span><br></pre></td></tr></table></figure>
<p>页面正常显示了：</p>
<img src="/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/image.png" class="" title="显示页面">

<p>在根据<a href="https://lanta.bangumi.cyou/2022/03/12/hexo-install-algolia/">https://lanta.bangumi.cyou/2022/03/12/hexo-install-algolia/</a>的方法注册algolia账户，并配置好搜索后，即可进行搜索。配置指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY= <span class="comment">#刚刚新建的API Key</span></span><br><span class="line">hexo algolia</span><br></pre></td></tr></table></figure>
<img src="/2023/08/03/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/image_1.png" class="" title="显示搜索页面">
<p>每次写完新文章后，记得再次更新algolia的索引库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure>
<h3 id="针对开始和刷新时的页面标题设置："><a href="#针对开始和刷新时的页面标题设置：" class="headerlink" title="针对开始和刷新时的页面标题设置："></a>针对开始和刷新时的页面标题设置：</h3><p>在&#x2F;theme&#x2F;主题&#x2F;source&#x2F;js&#x2F;utils.js中可以修改，共有两个设置（可添加）：<br>一个是实时时间的获取：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 获取实时时间，写入 <span class="built_in">id</span> 为 now-time 的标签中</span><br><span class="line"> */</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    const divTime = document.getElementById(<span class="string">&#x27;now-time&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">getTime</span></span>() &#123;</span><br><span class="line">        <span class="built_in">let</span> time = new Date();</span><br><span class="line">        <span class="built_in">let</span> hour = time.getHours() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getHours() : time.getHours();</span><br><span class="line">        <span class="built_in">let</span> minute = time.getMinutes() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getMinutes() : time.getMinutes();</span><br><span class="line">        <span class="built_in">let</span> second = time.getSeconds() &lt; 10 ? <span class="string">&#x27;0&#x27;</span> + time.getSeconds() : time.getSeconds();</span><br><span class="line">        divTime.innerText = hour + <span class="string">&#x27;:&#x27;</span> + minute + <span class="string">&#x27;:&#x27;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getTime();</span><br><span class="line">    setInterval(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        getTime();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>一个是页面title的更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 判断当前页面是否为活动页</span><br><span class="line"> */</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    // 网页当前状态判断</span><br><span class="line">    <span class="built_in">let</span> state, visibilityChange, status, doc = document;</span><br><span class="line">    <span class="keyword">if</span> (typeof document.hidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;visibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;visibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.mozHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;mozvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;mozVisibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.msHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;msvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;msVisibilityState&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof document.webkitHidden !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        visibilityChange = <span class="string">&#x27;webkitvisibilitychange&#x27;</span>;</span><br><span class="line">        state = <span class="string">&#x27;webkitVisibilityState&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> docText = doc.title;</span><br><span class="line">    // 添加监听器，在title里显示状态变化</span><br><span class="line">    doc.addEventListener(visibilityChange, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="keyword">if</span> (doc[state] === <span class="string">&#x27;visible&#x27;</span>) &#123;</span><br><span class="line">            doc.title = <span class="string">&#x27;欢迎回来！d(`･∀･)b 👏&#x27;</span>;</span><br><span class="line">            status = setTimeout(() =&gt; &#123;</span><br><span class="line">                doc.title = docText;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            doc.title = &#x27;藏起来了d(`x_x)b&#x27;;</span><br><span class="line">            if (status) &#123;</span><br><span class="line">                clearTimeout(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">    // 初始化页面状态</span><br><span class="line">    // doc.title = &#x27;Nothing2say的博客&#x27;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2023年8月日志</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
